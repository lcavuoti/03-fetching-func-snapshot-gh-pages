{"version":3,"sources":["Spinner.jsx","App.js","serviceWorker.js","ErrorBoundary.jsx","index.js"],"names":["Spinner","react_default","a","createElement","className","App","_useState","useState","_useState2","Object","slicedToArray","posts","setPosts","_useState3","hits","_useState4","data","setData","_useState5","results","_useState6","user","setUser","_useState7","_useState8","error","setError","_useState9","_useState10","loading","setLoading","useEffect","_fetchDataHits","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","axios","sent","stop","this","apply","arguments","fetchDataHits","fetchDataRandomUserMeWithErrors","_readJsonPlaceHolder","readJsonPlaceHolder","_ref","_callee2","_context2","fetch","then","response","json","catch","finally","_callee3","_context3","console","log","dataHitsMap","map","item","key","objectID","href","url","title","Fragment","login","uuid","name","first","src","picture","thumbnail","alt","p","body","Boolean","window","location","hostname","match","ErrorBoundary","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","children","React","Component","render","ErrorBoundary_ErrorBoundary","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f80a5eb0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Spinner() {\n  return (\n    <div className=\"lds-container\">\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Spinner from \"./Spinner\";\n\n\n//const App = () => {\nfunction App() {\n  // State\n  const [posts, setPosts] = useState(null);\n  const [data, setData] = useState({ hits: [] });\n  const [user, setUser] = useState({\n    results: [],\n  });\n\n  // ErrorHandling\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Effect Hook\n  useEffect(() => {\n\n    // function inside of Effect-hook defined\n    async function fetchDataHits() {\n      // await here\n      const result = await axios(\n        \"https://hn.algolia.com/api/v1/search?query=react-fetch\"\n      );\n      setData(result.data);\n    }\n\n    // fetch the data Call the function\n    fetchDataHits();\n  }, []);\n\n  // Effect Hook\n  useEffect(() => {\n    // function inside EffectHook\n    // fetch the user with axios\n    //fetchDataUser();\n\n    // fetch the user with fecth\n    //fetchDataRandomUserMeErrorHandling();\n    // fetch and errorhandling\n    fetchDataRandomUserMeWithErrors();\n    // from jsonplaceholder\n\n    readJsonPlaceHolder();\n  }, []);\n\n  // function outside effectHook with standard function fetch\n  // fecth with async/await = better to read than with teh Promise-Chain\n  // function outside effectHook with standard function fetch\n  // fetch with async/await = better to read than with the Promise-Chain\n  // preferred way of fetching data async/await with error handling!\n  // Synthactic Sugar over Promises :)\n  //const fetchDataRandomUserMeErrorHandling = async () => {\n  // function outside effectHook with standard function fetch\n  // fetch using Promise and Promise-chain of handlers\n  const fetchDataRandomUserMeWithErrors = async () => {\n    await fetch(\"https://randomuser.me/api?results=20\")\n      .then((response) => response.json())\n      .then(\n        (result) => {\n          setUser(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setError(error);\n        }\n      )\n      .catch((error) => {\n        setError(error);\n      })\n      .finally(() => setLoading(false));\n  };\n  /**\n   * renders one post, the post will be implicitly sent as param\n   * @param {renderPost from jsonplaceholder} p\n   */\n  function renderPost(p) {\n    return (\n      <div key={p.key} className=\"product\">\n\n        <a href=\"/\">\n          <h3>{p.title}</h3>\n          <p>${p.body}</p>\n        </a>\n      </div>\n    );\n  }\n  // from jsonplaceholder\n  async function readJsonPlaceHolder() {\n    await fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then((response) => response.json())\n      .then(\n        // more functions\n        (json) => setPosts(json),\n        (json) => console.log(json),\n        (error) => setError(error)\n      ) // with a function body\n      /* .then((json) => {\n        setPosts(json);\n        //console.log(json);\n      }) */\n      // .then((json) => console.log(json))\n      .catch((error) => setError(error))\n      .finally(() => setLoading(false));\n  }\n\n  /* variant 2: store the return value List in the const! */\n  const dataHitsMap = data.hits.map((item) => (\n    <li key={item.objectID}>\n      <a href={item.url}>{item.title}</a>\n    </li>\n  ));\n  /* variant 2: store the return value List in the const! */\n  function RandumUserMe() {\n    return (\n      //const RandumUserMe = () =>\n      user.results.map((user) => (\n        <li key={user.login.uuid}>\n          <a href={user.name.first}>{user.name.first}</a>\n          <img src={user.picture.thumbnail} alt=\"hello\" />\n        </li>\n      ))\n    );\n  }\n\n  /* variant 3:function expression */\n\n  /*console.log(this)\n\n  const testerObj = {\n    func1: function(){\n      // this here is the caller of x, global window obj here\n      console.log(\"from function\", this);\n    },\n\n    func2: () => {\n      // this here is NOT the caller of y\n      console.log(\"from arrow function\", this)\n    }\n  }\n  testerObj.func1();\n  testerObj.func2();\n  // early returns\n  return (\n\n        <h3>hello early</h3>\n  )*/\n  // early return\n  if (loading) return <Spinner />;\n  if (error) throw error;\n  return (\n    <React.Fragment >\n      <div className=\"App-header\">\n        <header><h1>Fetching Examples (algolia, randomuser.me, jsonplaceholder) 2022 Morning</h1></header>\n        <h3>Data Hits Example</h3>\n        <ul>\n          {\n            // calling the const of the List, shows the List directly\n            dataHitsMap\n            // calling the const of the function-reference because of that ()\n            //dataHitsMap1()\n            // variant 1: calling the map directly and the given function, return an array\n            // data.hits.map((item) => (\n            //   <li key={item.objectID}>\n            //     <a href={item.url}>{item.title}</a>\n            //   </li>\n            // ))\n          }\n        </ul>\n        <h3>Random User Example</h3>\n        <RandumUserMe />\n        <h3>from Jsonplaceholder</h3>\n        <ul>\n\n          {\n\n            // random user\n            //randumUserMe\n           posts.map(renderPost)\n          }\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    // child component wirl be rendered\n    return this.props.children;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { render } from 'react-snapshot';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\n//ReactDOM.render(\nrender(\n<ErrorBoundary>\n    <App />\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}